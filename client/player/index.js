// Import Soundworks library modules (client side)
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _soundworksClient = require('soundworks/client');

var _PlayerPerformanceJs = require('./PlayerPerformance.js');

var _PlayerPerformanceJs2 = _interopRequireDefault(_PlayerPerformanceJs);

var audioConfig = {
  schwitters: {
    file: 'sounds/schwitters.wav',
    markers: [0, 0.955, 2.193, 2.224, 3.804, 5.200, 7.090],
    resampling: [-1200, -700, 0, 700, 1200]
  },
  chloe: {
    file: 'sounds/quesquil-speaker-48k.wav',
    markers: [0, 1.119250, 1.497331, 1.672372, 1.996952, 2.355782, 3.541950, 3.863060, 4.091488, 5.068617],
    resampling: [0]
  },
  sonar: {
    file: 'sounds/sonar.wav',
    markers: [0],
    resampling: [-1000, -800, -600, -400, -200, 0, 200, 400, 600, 800, 1000]
  }
};

var audioFiles = [];

for (var key in audioConfig) {
  audioFiles.push(audioConfig[key].file);
}var init = function init() {
  _soundworksClient.client.init('player');

  var welcome = new _soundworksClient.Welcome({
    fullScreen: false,
    requireMobile: false
  });

  var control = new _soundworksClient.ClientControl();
  var sync = new _soundworksClient.ClientSync();
  var loader = new _soundworksClient.Loader({ files: audioFiles });
  var locator = new _soundworksClient.ClientLocator({
    positionRadius: 0.3,
    persist: true });
  // const orientation = new Orientation();
  // @todo - add a command to trigger the persist
  // random: true,
  var performance = new _PlayerPerformanceJs2['default'](audioConfig, sync, control, loader);

  // Start the scenario and order the modules
  _soundworksClient.client.start(function (serial, parallel) {
    return serial(parallel(welcome, loader, sync, control), locator,
    // orientation,
    performance);
  });
};

// Init app when document id ready
window.addEventListener('load', init);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvcGxheWVyL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O2dDQVNPLG1CQUFtQjs7bUNBQ0ksd0JBQXdCOzs7O0FBRXRELElBQU0sV0FBVyxHQUFHO0FBQ2xCLFlBQVUsRUFBRTtBQUNWLFFBQUksRUFBRSx1QkFBdUI7QUFDN0IsV0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0FBQ3RELGNBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDO0dBQ3hDO0FBQ0QsT0FBSyxFQUFFO0FBQ0wsUUFBSSxFQUFFLGlDQUFpQztBQUN2QyxXQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7QUFDdEcsY0FBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ2hCO0FBQ0QsT0FBSyxFQUFFO0FBQ0wsUUFBSSxFQUFFLGtCQUFrQjtBQUN4QixXQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDWixjQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQztHQUN6RTtDQUNGLENBQUE7O0FBRUQsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUV0QixLQUFLLElBQUksR0FBRyxJQUFJLFdBQVc7QUFDekIsWUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FBQSxBQUd6QyxJQUFNLElBQUksR0FBRyxTQUFQLElBQUksR0FBUztBQUNqQiwyQkFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRXRCLE1BQU0sT0FBTyxHQUFHLDhCQUFZO0FBQzFCLGNBQVUsRUFBRSxLQUFLO0FBQ2pCLGlCQUFhLEVBQUUsS0FBSztHQUNyQixDQUFDLENBQUM7O0FBRUgsTUFBTSxPQUFPLEdBQUcscUNBQW1CLENBQUM7QUFDcEMsTUFBTSxJQUFJLEdBQUcsa0NBQWdCLENBQUM7QUFDOUIsTUFBTSxNQUFNLEdBQUcsNkJBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNqRCxNQUFNLE9BQU8sR0FBRyxvQ0FBa0I7QUFDaEMsa0JBQWMsRUFBRSxHQUFHO0FBQ25CLFdBQU8sRUFBRSxJQUFJLEVBRWQsQ0FBQyxDQUFDOzs7O0FBRUgsTUFBTSxXQUFXLEdBQUcscUNBQXNCLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7QUFHOUUsMkJBQU8sS0FBSyxDQUFDLFVBQUMsTUFBTSxFQUFFLFFBQVE7V0FDNUIsTUFBTSxDQUNKLFFBQVEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsRUFDeEMsT0FBTzs7QUFFUCxlQUFXLENBQ1o7R0FBQSxDQUNGLENBQUM7Q0FDSCxDQUFBOzs7QUFHRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9jbGllbnQvcGxheWVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IFNvdW5kd29ya3MgbGlicmFyeSBtb2R1bGVzIChjbGllbnQgc2lkZSlcbmltcG9ydCB7XG4gIGNsaWVudCxcbiAgQ2xpZW50Q29udHJvbCxcbiAgQ2xpZW50TG9jYXRvcixcbiAgQ2xpZW50U3luYyxcbiAgT3JpZW50YXRpb24sXG4gIFdlbGNvbWUsXG4gIExvYWRlclxufSBmcm9tICdzb3VuZHdvcmtzL2NsaWVudCc7XG5pbXBvcnQgUGxheWVyUGVyZm9ybWFuY2UgZnJvbSAnLi9QbGF5ZXJQZXJmb3JtYW5jZS5qcyc7XG5cbmNvbnN0IGF1ZGlvQ29uZmlnID0ge1xuICBzY2h3aXR0ZXJzOiB7XG4gICAgZmlsZTogJ3NvdW5kcy9zY2h3aXR0ZXJzLndhdicsXG4gICAgbWFya2VyczogWzAsIDAuOTU1LCAyLjE5MywgMi4yMjQsIDMuODA0LCA1LjIwMCwgNy4wOTBdLFxuICAgIHJlc2FtcGxpbmc6IFstMTIwMCwgLTcwMCwgMCwgNzAwLCAxMjAwXSxcbiAgfSxcbiAgY2hsb2U6IHtcbiAgICBmaWxlOiAnc291bmRzL3F1ZXNxdWlsLXNwZWFrZXItNDhrLndhdicsXG4gICAgbWFya2VyczogWzAsIDEuMTE5MjUwLCAxLjQ5NzMzMSwgMS42NzIzNzIsIDEuOTk2OTUyLCAyLjM1NTc4MiwgMy41NDE5NTAsIDMuODYzMDYwLCA0LjA5MTQ4OCwgNS4wNjg2MTddLFxuICAgIHJlc2FtcGxpbmc6IFswXSxcbiAgfSxcbiAgc29uYXI6IHtcbiAgICBmaWxlOiAnc291bmRzL3NvbmFyLndhdicsXG4gICAgbWFya2VyczogWzBdLFxuICAgIHJlc2FtcGxpbmc6IFstMTAwMCwgLTgwMCwgLTYwMCwgLTQwMCwgLTIwMCwgMCwgMjAwLCA0MDAsIDYwMCwgODAwLCAxMDAwXSxcbiAgfVxufVxuXG5jb25zdCBhdWRpb0ZpbGVzID0gW107XG5cbmZvciAobGV0IGtleSBpbiBhdWRpb0NvbmZpZylcbiAgYXVkaW9GaWxlcy5wdXNoKGF1ZGlvQ29uZmlnW2tleV0uZmlsZSk7XG5cblxuY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgY2xpZW50LmluaXQoJ3BsYXllcicpO1xuXG4gIGNvbnN0IHdlbGNvbWUgPSBuZXcgV2VsY29tZSh7XG4gICAgZnVsbFNjcmVlbjogZmFsc2UsXG4gICAgcmVxdWlyZU1vYmlsZTogZmFsc2UsXG4gIH0pO1xuXG4gIGNvbnN0IGNvbnRyb2wgPSBuZXcgQ2xpZW50Q29udHJvbCgpO1xuICBjb25zdCBzeW5jID0gbmV3IENsaWVudFN5bmMoKTtcbiAgY29uc3QgbG9hZGVyID0gbmV3IExvYWRlcih7IGZpbGVzOiBhdWRpb0ZpbGVzIH0pO1xuICBjb25zdCBsb2NhdG9yID0gbmV3IENsaWVudExvY2F0b3Ioe1xuICAgIHBvc2l0aW9uUmFkaXVzOiAwLjMsXG4gICAgcGVyc2lzdDogdHJ1ZSwgLy8gQHRvZG8gLSBhZGQgYSBjb21tYW5kIHRvIHRyaWdnZXIgdGhlIHBlcnNpc3RcbiAgICAvLyByYW5kb206IHRydWUsXG4gIH0pO1xuICAvLyBjb25zdCBvcmllbnRhdGlvbiA9IG5ldyBPcmllbnRhdGlvbigpO1xuICBjb25zdCBwZXJmb3JtYW5jZSA9IG5ldyBQbGF5ZXJQZXJmb3JtYW5jZShhdWRpb0NvbmZpZywgc3luYywgY29udHJvbCwgbG9hZGVyKTtcblxuICAvLyBTdGFydCB0aGUgc2NlbmFyaW8gYW5kIG9yZGVyIHRoZSBtb2R1bGVzXG4gIGNsaWVudC5zdGFydCgoc2VyaWFsLCBwYXJhbGxlbCkgPT5cbiAgICBzZXJpYWwoXG4gICAgICBwYXJhbGxlbCh3ZWxjb21lLCBsb2FkZXIsIHN5bmMsIGNvbnRyb2wpLFxuICAgICAgbG9jYXRvcixcbiAgICAgIC8vIG9yaWVudGF0aW9uLFxuICAgICAgcGVyZm9ybWFuY2VcbiAgICApXG4gICk7XG59XG5cbi8vIEluaXQgYXBwIHdoZW4gZG9jdW1lbnQgaWQgcmVhZHlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaW5pdCk7XG4iXX0=